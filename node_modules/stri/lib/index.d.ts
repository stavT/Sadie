declare type str = string;
export declare class Stri {
    /**
     * you don`t even need it - just import this module and all funcs now available inside basic string class
     * @returns
     */
    static includeMe(): string;
    /**
     * fast way to cut away a last part split by smth, for instance
     * `"lalala/hahaha/bebebe".cutLast('/')` will return `"lalala/hahaha"`
     * @param	splitter
     */
    static cutLast(s: str, splitter: str): str;
    /**
     * fast way to cut away a first part split by smth, for instance
     * `"lalala/hahaha/bebebe".cutFirst('/')` will return `"hahaha/bebebe"`
     * @param	splitter
     */
    static cutFirst(s: str, splitter: str): str;
    /**
     * fast way to get the last part split by smth, for instance
     * `"lalala/hahaha/bebebe".getLast('/')` will return `"bebebe"`
     * @param	splitter
     */
    static getLast(s: str, splitter: str): str;
    /**
     * fast way get the first part split by smth, for instance
     * `"lalala/hahaha/bebebe".getFirst('/')` will return `"lalala"`
     * @param	splitter
     */
    static getFirst(s: str, splitter: str): str;
    /**
     * Replaces `from` with `to`
     * @param from what to replace
     * @param to to what to replace
     */
    static swap(s: str, from: str, to: str): string;
    /**
     * does this string contain `what`?
     * @param what
     * @returns
     */
    static has(s: str, what: string): boolean;
    /**
     * returns string between borderA and B. Gets between the first A and the LAST B
     * @param	borderA
     * @param	borderB
     */
    static getBetween(s: str, borderA: str, borderB: str): str;
    /**
     * returns string between borderA and B. Gets between the FIRST A and the FIRST B
     * @param	borderA
     * @param	borderB
     */
    static getBetweenClose(s: str, borderA: str, borderB: str): str;
    /**
     * returns string between borders
     * @param	borderA - left border
     * @param	borderB - right border
     * @param aIsFirst - true if borderA is first, false if is last
     * @param bIsFirst - true if borderB is first, false if is last
     */
    static between(s: str, borderA: str, borderB: str, aIsFirst: boolean, bIsFirst: boolean): str;
    /**
     * Removes all `what`s in the string
     * In fact, same as `str.split(what).join('')`
     * @param what what to remove
     * @returns
     */
    static oust(s: str, what: str): string;
}
declare global {
    export interface String {
        cutLast(splitter: str): str;
        cutFirst(splitter: str): str;
        getLast(splitter: str): str;
        getFirst(splitter: str): str;
        swap(what: str, withWhat: str): str;
        has(what: str): boolean;
        oust(what: str): string;
        getBetween(borderA: str, borderB: str): str;
        getBetweenClose(borderA: str, borderB: str): str;
        between(borderA: str, borderB: str, aIsFirst: boolean, bIsFirst: boolean): str;
    }
}
export {};
